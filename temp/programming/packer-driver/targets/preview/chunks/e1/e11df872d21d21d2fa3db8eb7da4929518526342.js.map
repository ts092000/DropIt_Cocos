{"version":3,"sources":["file:///Users/ADMIN/Desktop/drop-it/assets/Script/GameCenter/GameCenterController.ts"],"names":["_decorator","Component","director","find","Node","StoreAPI","GameData","Constants","GameClient","ccclass","property","GameCenterController","gameIDDev","apiKeyDev","gameClient","user","initGameClient","callBack","parameters","NODE_NAME","window","parent","dev","initAsync","then","userID","citizen","getCitizenId","userName","account","getUsername","name","getCitizenName","length","slice","data","getGameData","response","undefined","gameData","console","log","catch","e","gameClientParams","addComponent","userData","addPersistRootNode","apply","startMatch","getComponent","match","matchData","checkLog","matchId","error","completeMatch","setGameData","logGame","push","matchLog","logMatch","getLeaderBoard","type","leaderBoard","getList"],"mappings":"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","sourcesContent":["import { _decorator, Component, director, find, Node } from 'cc';\r\nimport { StoreAPI } from './StoreAPI';\r\nimport { GameData } from '../Utils/GameData';\r\nimport Constants from '../Utils/Constants';\r\nimport GameClient from '@onechaintech/gamesdk';\r\nimport { LeaderBoard } from '../Utils/DataTypes';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameCenterController')\r\nexport class GameCenterController extends Component {\r\n    private readonly gameIDDev: string = '6502b21c33f6e81c437519a2';\r\n    private readonly apiKeyDev: string = '3cb8f176-1a2e-48e4-a936-03c05f9e24f9';\r\n    public gameClient;\r\n    public user;\r\n\r\n    public initGameClient(callBack: () => void): void {\r\n        let parameters = new Node(Constants.NODE_NAME.GameClient);\r\n        this.gameClient = new GameClient(this.gameIDDev, this.apiKeyDev, window.parent, { dev: true });\r\n\r\n        this.gameClient.initAsync().then(() => {\r\n            //Get current user id\r\n            let userID = this.gameClient.user.citizen.getCitizenId();\r\n            this.user = {\r\n                userID: this.gameClient.user.citizen.getCitizenId(),\r\n                userName: this.gameClient.user.account.getUsername(),\r\n                name: this.gameClient.user.citizen.getCitizenName()\r\n            }\r\n            if (!this.user.name || this.user.name.length === 0) this.user.name = this.gameClient.user.account.getUsername().slice(6, this.gameClient.user.account.getUsername().length);\r\n\r\n            //Get gamedata from server\r\n            this.gameClient.user.data.getGameData().then((response) => {\r\n                //Save data\r\n                if (response.data[`${userID}`] !== undefined) GameData.gameData = response.data[`${userID}`];\r\n                console.log(GameData.gameData);\r\n\r\n\r\n\r\n            }).catch((e) => {\r\n                console.log('Error at get game data: ', e);\r\n            })\r\n\r\n            let gameClientParams = parameters.addComponent(StoreAPI);\r\n            gameClientParams.gameClient = this.gameClient;\r\n            gameClientParams.userData = this.user;\r\n            director.addPersistRootNode(parameters);\r\n\r\n            //Run callback\r\n            callBack.apply(callBack);\r\n        }).catch((e) => {\r\n            console.log('Error at init game client: ', e);\r\n        })\r\n    }\r\n\r\n    public startMatch(callBack: () => void): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n        this.gameClient = gameClientParams.gameClient;\r\n\r\n        this.gameClient.match.startMatch().then((data) => {\r\n            gameClientParams.matchData = data;\r\n\r\n            //Create array log\r\n            if (!GameData.gameData.checkLog) GameData.gameData.checkLog = {};\r\n            GameData.gameData.checkLog[data.matchId] = [];\r\n\r\n\r\n            // Apply callback\r\n            callBack.apply(callBack);\r\n        }).catch((error) => console.log('Error at start match: ', error));\r\n    }\r\n\r\n    /** \r\n     * @param callBack Call when api done\r\n     * @param data Data leader board\r\n     */\r\n    public completeMatch(callBack: () => void, data: Object): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n        this.gameClient = gameClientParams.gameClient;\r\n        //let timeout = 5000; \r\n        //this.gameClient.match.completeMatch(gameClientParams.matchData, data, timeout)...\r\n\r\n        this.gameClient.match.completeMatch(gameClientParams.matchData, data)\r\n            .then(() => {\r\n                let userID = this.gameClient.user.citizen.getCitizenId();\r\n                this.gameClient.user.data.setGameData({ [userID]: GameData.gameData }, false).then(() => { })\r\n                    .catch((e) => { console.log(\"Error at set game data\", e); })\r\n\r\n                //Apply callback\r\n                callBack.apply(callBack);\r\n            }).catch((e) => {\r\n                console.log(e);\r\n            })\r\n    }\r\n\r\n    public setGameData(logGame: { score: number, seconds: number, datetime: string }): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n\r\n        this.gameClient = gameClientParams.gameClient;\r\n        let userID = this.gameClient.user.citizen.getCitizenId();\r\n        let matchId = gameClientParams.matchData.matchId\r\n\r\n        GameData.gameData.checkLog[`${matchId}`].push(logGame);\r\n    }\r\n\r\n    public matchLog(data: Object): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n        this.gameClient = gameClientParams.gameClient;\r\n        this.gameClient.match.logMatch(gameClientParams.matchData.matchId, data).catch((e) => console.log(e));\r\n    }\r\n\r\n    public async getLeaderBoard(type: number): Promise<LeaderBoard[]> {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n        this.gameClient = gameClientParams.gameClient;\r\n        this.user = gameClientParams.userData;\r\n\r\n        let data: LeaderBoard[] = await this.gameClient.leaderBoard.getList(type).catch((e) => {\r\n            return [];\r\n        });\r\n        return data;\r\n    }\r\n\r\n}\r\n"]}