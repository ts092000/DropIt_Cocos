{"version":3,"sources":["file:///Users/ADMIN/Desktop/drop-it/assets/Script/GameManager/GameView.ts"],"names":["_decorator","Animation","Camera","Component","Label","math","Node","SpriteFrame","UITransform","Vec3","Block","Contants","PoolManager","Progress","ccclass","property","GameView","type","tooltip","playAnimationScore","text","el","poolManager","getAnimationCombo","mainNode","addChild","getComponent","string","console","log","play","generateArray","dataArray","shuffleArray","minLength","maxLength","resultArray","i","sum","length","push","space","BOARD_SIZE","COL","randomIndex","Math","floor","random","splice","array","index","temp","generateRowBlock","nextPosX","listBlock","randomColor","randomRangeInt","indexSpriteFrame","block","getBlock","compBlock","setIndex","setSpriteFrame","listSpriteFrame","setLength","addRowBlock","map","blockContainer","getLocation","event","location","cameraGame","screenToWorld","x","y","v3","inverseTransformPoint","showShadow","col","selectShadow","active","setPosition","SQUARE_SIZE","HEIGHT","uiTransfrom","width","WIDTH","hiddenShadow","setPosShadow","removeBlock","showClearNode","position","clearNode","getClearNode","animation","on","EventType","FINISHED","putClearNode","showResult","gameOverNode","switchPause","pauseNode","showLoading","progerss","showNode","hiddenLoading","hideNode","setValueLoading","title","value","toValue"],"mappings":"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","sourcesContent":["import { _decorator, Animation, Button, Camera, Component, director, EventTouch, instantiate, Label, math, Node, Prefab, randomRangeInt, SpriteFrame, UITransform, Vec2, Vec3 } from 'cc';\r\nimport Static from '../Utils/Constants';\r\nimport { Block } from '../PrefabManager/Block';\r\nimport Contants from '../Utils/Constants';\r\nimport { PoolManager } from './PoolManager';\r\nimport { Progress } from '../Progress';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameView')\r\nexport class GameView extends Component {\r\n    @property({\r\n        type: SpriteFrame,\r\n        tooltip: \"List sprite frame\",\r\n    })\r\n    private listSpriteFrame: SpriteFrame[] = [];\r\n\r\n    @property({\r\n        type: Node,\r\n        tooltip: \"Node parent\"\r\n    })\r\n    private blockContainer: Node;\r\n\r\n    @property({\r\n        type: Node,\r\n        tooltip: 'Select block shadow'\r\n    })\r\n    private selectShadow: Node;\r\n\r\n    @property({\r\n        type: Camera,\r\n        tooltip: 'Camera screen game'\r\n    })\r\n    private cameraGame: Camera;\r\n\r\n    @property({\r\n        type: PoolManager,\r\n        tooltip: 'Pool manager node'\r\n    })\r\n    private poolManager: PoolManager;\r\n\r\n    @property({\r\n        type: Node,\r\n        tooltip: 'Game over node'\r\n    })\r\n    private gameOverNode: Node;\r\n\r\n    @property({\r\n        type: Node,\r\n        tooltip: 'Pause node'\r\n    })\r\n    private pauseNode: Node;\r\n\r\n    @property({\r\n        type: Progress,\r\n        tooltip: 'Progress controller'\r\n    })\r\n    private progerss: Progress;\r\n\r\n\r\n    @property(Node)\r\n    private mainNode: Node;\r\n\r\n    public playAnimationScore(text: string): void {\r\n        let el = this.poolManager.getAnimationCombo();\r\n        this.mainNode.addChild(el);\r\n        el.getComponent(Label).string = text;\r\n        console.log(el.getComponent(Label).string);\r\n\r\n        el.getComponent(Animation).play();\r\n    }\r\n\r\n    /**\r\n     * Random config array\r\n     * @returns Array result\r\n     */\r\n    private generateArray(): Array<number> {\r\n        let dataArray = [4, 4, 3, 3, 2, 2, 2, 1, 1, 1];\r\n        this.shuffleArray(dataArray);\r\n\r\n        const minLength = 6;\r\n        const maxLength = 7;\r\n        let resultArray: number[] = [];\r\n        let i = 0, sum = 0;\r\n\r\n        while (i < dataArray.length && sum < minLength) {\r\n            if (sum + dataArray[i] <= maxLength) {\r\n                resultArray.push(dataArray[i]);\r\n                sum += dataArray[i];\r\n            }\r\n            i++;\r\n        }\r\n\r\n        let space = Contants.BOARD_SIZE.COL - sum;\r\n        for (let i = 0; i < space; i++) {\r\n            let randomIndex = Math.floor(Math.random() * (resultArray.length + 1));\r\n            resultArray.splice(randomIndex, 0, 0);\r\n        }\r\n        return resultArray;\r\n    }\r\n    /**\r\n     * @param array Array is need shuffle\r\n     */\r\n    private shuffleArray(array: Array<number>): void {\r\n        let index = array.length;\r\n        while (index > 0) {\r\n            let randomIndex = Math.floor(Math.random() * index);\r\n            index--;\r\n\r\n            let temp = array[index];\r\n            array[index] = array[randomIndex];\r\n            array[randomIndex] = temp;\r\n        }\r\n    }\r\n\r\n    public generateRowBlock(): Node[] {\r\n        let resultArray = this.generateArray();\r\n        let nextPosX: number = 0;\r\n        let listBlock: Node[] = [];\r\n\r\n        for (let i = 0; i < resultArray.length; i++) {\r\n            if (resultArray[i] === 0) {\r\n                nextPosX++;\r\n                continue;\r\n            }\r\n            let randomColor = math.randomRangeInt(0, 4);\r\n            let indexSpriteFrame = randomColor * 4 + resultArray[i] - 1;\r\n\r\n            let block = this.poolManager.getBlock();\r\n            let compBlock = block.getComponent(Block);\r\n\r\n            compBlock.setIndex(-1, nextPosX);\r\n            compBlock.setSpriteFrame(this.listSpriteFrame[indexSpriteFrame]);\r\n            compBlock.getComponent(Block).setLength(resultArray[i]);\r\n\r\n            nextPosX += resultArray[i];\r\n            listBlock.push(block);\r\n        }\r\n        return listBlock;\r\n    }\r\n\r\n    public addRowBlock(listBlock: Node[]): void {\r\n        listBlock.map((block) => this.blockContainer.addChild(block));\r\n    }\r\n\r\n    /**\r\n     * @param event Event touch\r\n     * @param node Node to inverse\r\n     * @returns Local position of point in container node\r\n     */\r\n    public getLocation(event: EventTouch): Vec3 {\r\n        let location = this.cameraGame.screenToWorld(new Vec3(event.getLocation().x, event.getLocation().y, 0));\r\n        let v3: Vec3 = new Vec3();\r\n        this.blockContainer.inverseTransformPoint(v3, new Vec3(location.x, location.y));\r\n        return v3;\r\n    }\r\n\r\n    public showShadow(col: number, length: number): void {\r\n        this.selectShadow.active = true;\r\n        this.selectShadow.setPosition(col * Contants.SQUARE_SIZE.HEIGHT, 0);\r\n\r\n        let uiTransfrom = this.selectShadow.getComponent(UITransform);\r\n        uiTransfrom.width = length * Contants.SQUARE_SIZE.WIDTH;\r\n    }\r\n\r\n    public hiddenShadow(): void {\r\n        this.selectShadow.active = false;\r\n    }\r\n\r\n    public setPosShadow(col: number): void {\r\n        this.selectShadow.setPosition(col * Contants.SQUARE_SIZE.HEIGHT, 0);\r\n    }\r\n\r\n    public removeBlock(block: Node): void {\r\n        this.poolManager.removeBlock(block);\r\n    }\r\n\r\n    public showClearNode(position: Vec3): void {\r\n        let clearNode = this.poolManager.getClearNode();\r\n        clearNode.active = true;\r\n        clearNode.setPosition(position);\r\n        this.blockContainer.addChild(clearNode);\r\n\r\n        let animation = clearNode.getComponent(Animation);\r\n        animation.play();\r\n        animation.on(Animation.EventType.FINISHED, () => this.poolManager.putClearNode(clearNode));\r\n    }\r\n\r\n    public showResult(): void {\r\n        this.gameOverNode.active = true;\r\n        this.gameOverNode.getComponent(Animation).play();\r\n    }\r\n\r\n    public switchPause(): boolean {\r\n        this.pauseNode.active = !this.pauseNode.active;\r\n        return this.pauseNode.active;\r\n    }\r\n\r\n    public showLoading(): void {\r\n        this.progerss.showNode();\r\n    }\r\n\r\n    public hiddenLoading(): void {\r\n        this.progerss.hideNode();\r\n    }\r\n\r\n    public setValueLoading(title: string, value: number): void {\r\n        this.progerss.toValue(title, value);\r\n    }\r\n}\r\n\r\n"]}