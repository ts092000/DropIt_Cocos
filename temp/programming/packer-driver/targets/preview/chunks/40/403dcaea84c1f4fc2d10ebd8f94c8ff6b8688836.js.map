{"version":3,"sources":["file:///Users/ADMIN/Desktop/drop-it/assets/Script/GameManager/GameController.ts"],"names":["_decorator","Button","Component","director","Node","Vec3","GameView","Block","Constants","AudioType","MatrixManager","ScoreManager","AudioController","GameCenterController","LeaderboardHandle","ccclass","property","GameController","type","tooltip","listBlock","Array","startMouseLocation","isPause","currentBlock","currentPosition","currentLimitPosition","DEFAULT_LIMIT_POSITION","currentIndexCol","isGameOver","interval","time","countScore","combo","comboRatio","inteLog","start","gameView","showLoading","setValueLoading","gameCenter","startMatch","setInterval","setTimeout","hiddenLoading","initGame","generateRowBlock","blockContainer","on","EventType","TOUCH_MOVE","onTouchMove","getNextIndexRows","addEventButton","buttonPause","node","CLICK","switchPause","listButtonHome","map","button","loadScene","SCENE_NAME","BEGIN","listButtonRestart","GAME","buttonResume","getListBlock","audioController","playAudio","Push","block","compBlock","getComponent","index","getIndex","setIndex","row","col","rowBlock","fill","length","getLength","addEventBlock","matrixManager","pushArray","addRowBlock","isMaxRow","gameOver","matchLog","score","scoreManager","getScore","completeMatch","lbHandle","show","GameOver","setLabelGameOver","showResult","TOUCH_START","onTouchStartBlock","TOUCH_END","onTouchEndBlock","TOUCH_CANCEL","event","Drag","target","showShadow","position","clone","y","getLocation","getRow","minIndex","maxIndex","Min","SQUARE_SIZE","WIDTH","Max","Dragend","hiddenShadow","indexRow","indexCol","fillValue","location","move","x","setPosition","Math","floor","HEIGHT","setPosShadow","checkFall","active","nextRow","getNextRow","playAnimation","Drop","i","isEmpty","matrixData","shift","isMinRow","listRowFull","getListRowFull","clearFull","clearRow","showClearNode","Remove","playAnimationScore","getBlockOfRow","addScore","removeBlock","listBlockRow","reverse","push","children","filter","item","sort","prev","next"],"mappings":"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","sourcesContent":["import { _decorator, Button, Camera, Component, director, EventTouch, Input, input, log, Node, Vec2, Vec3 } from 'cc';\r\nimport { GameView } from './GameView';\r\nimport { Block } from '../PrefabManager/Block';\r\nimport Constants from '../Utils/Constants';\r\nimport { AudioType, Limit } from '../Utils/DataTypes';\r\nimport { MatrixManager } from './MatrixManager';\r\nimport { ScoreManager } from './ScoreManager';\r\nimport { AudioController } from '../AudioController';\r\nimport { GameCenterController } from '../GameCenter/GameCenterController';\r\nimport { LeaderboardHandle } from '../../Leaderboard/Script/LeaderboardHandle';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n    @property({\r\n        type: GameView,\r\n        tooltip: 'Game view node'\r\n    })\r\n    private gameView: GameView;\r\n\r\n    @property({\r\n        type: Node,\r\n        tooltip: 'Block container'\r\n    })\r\n    private blockContainer: Node;\r\n\r\n    @property({\r\n        type: MatrixManager,\r\n        tooltip: 'Matrix manager node'\r\n    })\r\n    private matrixManager: MatrixManager;\r\n\r\n    @property({\r\n        type: ScoreManager,\r\n        tooltip: 'Score manager'\r\n    })\r\n    private scoreManager: ScoreManager;\r\n\r\n    @property({\r\n        type: AudioController,\r\n        tooltip: 'Audio controller'\r\n    })\r\n    private audioController: AudioController;\r\n    @property({\r\n        type: Button,\r\n        tooltip: 'Button pause'\r\n    })\r\n    private buttonPause: Button;\r\n\r\n    @property({\r\n        type: Button,\r\n        tooltip: 'List button home'\r\n    })\r\n    private listButtonHome: Button[] = [];\r\n\r\n    @property({\r\n        type: Button,\r\n        tooltip: 'List button restart'\r\n    })\r\n    private listButtonRestart: Button[] = [];\r\n\r\n    @property({\r\n        type: Button,\r\n        tooltip: 'Button resume'\r\n    })\r\n    private buttonResume: Button;\r\n\r\n    @property({\r\n        type: GameCenterController,\r\n        tooltip: 'Game center controller'\r\n    })\r\n    private gameCenter: GameCenterController;\r\n\r\n    @property({\r\n        type: LeaderboardHandle\r\n    })\r\n    private lbHandle: LeaderboardHandle;\r\n\r\n\r\n    private listBlock: Array<Node> = new Array();\r\n    private startMouseLocation: Vec3;\r\n    private isPause: boolean = false;\r\n\r\n    private currentBlock: Node;\r\n    private currentPosition: Vec3;\r\n    private currentLimitPosition: Limit = Constants.DEFAULT_LIMIT_POSITION;\r\n    private currentIndexCol: number = 0;\r\n    private isGameOver: boolean = false;\r\n    private interval: number;\r\n    private time: number = 0;\r\n    private countScore: number = 0;\r\n    private combo: number = 1;\r\n    private comboRatio = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5];\r\n\r\n    private inteLog: number = 0;\r\n\r\n    protected start(): void {\r\n        this.gameView.showLoading();\r\n        this.gameView.setValueLoading('Connecting to SA World...', 0.7);\r\n        this.gameCenter.startMatch(() => {\r\n            this.interval = setInterval(() => this.time++, 1000);\r\n            this.gameView.setValueLoading('Connected successfully!', 1);\r\n            setTimeout(() => {\r\n                this.gameView.hiddenLoading();\r\n                this.initGame();\r\n            }, 700);\r\n        })\r\n\r\n        // this.gameView.hiddenLoading();\r\n        // this.initGame();\r\n    }\r\n\r\n    private initGame(): void {\r\n        this.generateRowBlock();\r\n        this.generateRowBlock();\r\n        this.generateRowBlock();\r\n\r\n        this.blockContainer.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n\r\n        this.getNextIndexRows();\r\n        this.addEventButton();\r\n    }\r\n\r\n    private addEventButton(): void {\r\n        this.buttonPause.node.on(Button.EventType.CLICK, () => {\r\n            if (this.isPause) return;\r\n            this.isPause = this.gameView.switchPause();\r\n        });\r\n\r\n        this.listButtonHome.map((button) => button.node.on(Button.EventType.CLICK, () => director.loadScene(Constants.SCENE_NAME.BEGIN)));\r\n        this.listButtonRestart.map((button) => button.node.on(Button.EventType.CLICK, () => director.loadScene(Constants.SCENE_NAME.GAME)));\r\n        this.buttonResume.node.on(Button.EventType.CLICK, () => {\r\n            this.isPause = false;\r\n            this.gameView.switchPause();\r\n        })\r\n    }\r\n\r\n    private generateRowBlock(): void {\r\n        this.isPause = true;\r\n        this.listBlock = this.getListBlock();\r\n        this.audioController.playAudio(AudioType.Push);\r\n\r\n        //Move blocks\r\n        this.listBlock.map((block) => {\r\n            let compBlock = block.getComponent(Block);\r\n            let index = compBlock?.getIndex();\r\n            compBlock?.setIndex(index.row + 1, index.col);\r\n        })\r\n\r\n        let row: Array<number> = new Array(8);\r\n        let rowBlock = this.gameView.generateRowBlock();\r\n        row.fill(0, 0, row.length);\r\n\r\n        //Set new blocks\r\n        rowBlock.map((block) => {\r\n            let compBlock = block.getComponent(Block);\r\n            let index = compBlock.getIndex();\r\n            let length = compBlock.getLength();\r\n            row.fill(1, index.col, index.col + length);\r\n            this.addEventBlock(block);\r\n        })\r\n\r\n        //Add blocks\r\n        this.matrixManager.pushArray(row);\r\n        this.gameView.addRowBlock(rowBlock);\r\n\r\n        if (this.matrixManager.isMaxRow()) this.gameOver();\r\n\r\n\r\n        setTimeout(() => {\r\n            this.getNextIndexRows();\r\n        }, 200);\r\n    }\r\n\r\n    private gameOver(): void {\r\n        //clearInterval(this.inteLog);\r\n        this.gameCenter.matchLog({ score: this.scoreManager.getScore() });\r\n        this.gameCenter.completeMatch(() => {\r\n            this.lbHandle.show();\r\n        }, { score: this.scoreManager.getScore() });\r\n        this.isPause = true;\r\n        this.isGameOver = true;\r\n        this.audioController.playAudio(AudioType.GameOver);\r\n        this.scoreManager.setLabelGameOver();\r\n        this.gameView.showResult();\r\n    }\r\n\r\n    private addEventBlock(block: Node): void {\r\n        block.on(Node.EventType.TOUCH_START, this.onTouchStartBlock, this);\r\n        block.on(Node.EventType.TOUCH_END, this.onTouchEndBlock, this);\r\n        block.on(Node.EventType.TOUCH_CANCEL, this.onTouchEndBlock, this);\r\n    }\r\n\r\n    private onTouchStartBlock(event: EventTouch): void {\r\n        if (this.isPause || this.isGameOver) return;\r\n        this.audioController.playAudio(AudioType.Drag);\r\n\r\n        let block: Node = event.target;\r\n        let compBlock = block.getComponent(Block);\r\n        //Show select shadow\r\n        this.gameView.showShadow(compBlock.getIndex().col, compBlock.getLength());\r\n\r\n        //Get current values\r\n        this.currentBlock = block;\r\n        this.currentPosition = block.position.clone();\r\n        this.currentPosition.y = compBlock.getIndex().row * 37;\r\n        this.startMouseLocation = this.gameView.getLocation(event);\r\n        this.currentIndexCol = compBlock.getIndex().col;\r\n\r\n        //Get max index, min index\r\n        let row = this.matrixManager.getRow(compBlock.getIndex().row);\r\n        let minIndex = compBlock.getIndex().col - 1 <= 0 ? 0 : compBlock.getIndex().col - 1;\r\n        let maxIndex = compBlock.getIndex().col + compBlock.getLength();\r\n        maxIndex = maxIndex === row.length - 1 ? row.length - 1 : maxIndex;\r\n\r\n        while (minIndex > 0 && row[minIndex] === 0) minIndex--;\r\n        while (maxIndex < row.length && row[maxIndex] === 0) maxIndex++;\r\n\r\n        //Get max, min position\r\n        this.currentLimitPosition.Min = (minIndex === 0 && (row[minIndex] === 0 || minIndex === compBlock.getIndex().col)) ?\r\n            0 : (minIndex + 1) * Constants.SQUARE_SIZE.WIDTH;\r\n        this.currentLimitPosition.Max = (maxIndex - compBlock.getLength()) * Constants.SQUARE_SIZE.WIDTH;\r\n    }\r\n\r\n    private onTouchEndBlock(event: EventTouch): void {\r\n        if (this.isPause || this.isGameOver || !this.currentBlock) return;\r\n        this.isPause = true;\r\n        this.audioController.playAudio(AudioType.Dragend);\r\n        this.combo = 1;\r\n\r\n        this.gameView.hiddenShadow();\r\n        let indexRow = this.currentBlock.getComponent(Block).getIndex().row;\r\n        let indexCol = this.currentBlock.getComponent(Block).getIndex().col;\r\n        let length = this.currentBlock.getComponent(Block).getLength();\r\n\r\n        //If not change then back drop\r\n        if (indexCol === this.currentIndexCol) {\r\n            this.currentBlock.getComponent(Block).setIndex(indexRow, indexCol, 0.05);\r\n            this.isPause = false;\r\n            return;\r\n        }\r\n\r\n        this.matrixManager.fillValue(indexRow, 0, indexCol, indexCol + length);\r\n        this.currentBlock.getComponent(Block).setIndex(indexRow, this.currentIndexCol, 0.01);\r\n\r\n        indexRow = this.currentBlock.getComponent(Block).getIndex().row;\r\n        indexCol = this.currentBlock.getComponent(Block).getIndex().col;\r\n        this.matrixManager.fillValue(indexRow, 1, indexCol, indexCol + length);\r\n        this.currentBlock = null;\r\n\r\n        setTimeout(() => {\r\n            if (this.isPause === false) this.generateRowBlock();\r\n        }, 250);\r\n\r\n        setTimeout(() => {\r\n            this.getNextIndexRows();\r\n        }, 100);\r\n    }\r\n\r\n    /**\r\n     * Touch move on container node\r\n     */\r\n    private onTouchMove(event: EventTouch): void {\r\n        if (this.isPause || !this.currentBlock || this.isGameOver) return;\r\n\r\n        let location = this.gameView.getLocation(event);\r\n        let move = location.x - this.startMouseLocation.x;\r\n        let position = new Vec3(this.currentPosition.x + move, this.currentPosition.y);\r\n\r\n        if (position.x < this.currentLimitPosition.Min) position.x = this.currentLimitPosition.Min;\r\n        if (position.x > this.currentLimitPosition.Max) position.x = this.currentLimitPosition.Max;\r\n        this.currentBlock.setPosition(position);\r\n\r\n        this.currentIndexCol = Math.floor((position.x - 18) / Constants.SQUARE_SIZE.HEIGHT) + 1;\r\n        this.gameView.setPosShadow(this.currentIndexCol);\r\n    }\r\n\r\n    private getNextIndexRows(): void {\r\n        this.isPause = true;\r\n        let listBlock = this.getListBlock();\r\n        let checkFall: boolean = false;\r\n\r\n        for (let block of listBlock) {\r\n            let compBlock = block.getComponent(Block);\r\n            if (!compBlock) continue;\r\n            if (block.active === false) continue;\r\n\r\n            let indexRow = compBlock.getIndex().row;\r\n            let indexCol = compBlock.getIndex().col;\r\n            let length = compBlock.getLength();\r\n            if (indexRow < 0) continue;\r\n\r\n            //Fall block\r\n            let nextRow = this.matrixManager.getNextRow(indexRow, indexCol, length);\r\n            compBlock.setIndex(nextRow, indexCol);\r\n            if (nextRow !== indexRow) {\r\n                setTimeout(() => {\r\n                    compBlock.playAnimation();\r\n                }, 200);\r\n\r\n                checkFall = true;\r\n            }\r\n            if (checkFall) {\r\n                this.audioController.playAudio(AudioType.Drop);\r\n            }\r\n            this.matrixManager.fillValue(indexRow, 0, indexCol, indexCol + length);\r\n            this.matrixManager.fillValue(nextRow, 1, indexCol, indexCol + length);\r\n        }\r\n        let i = 0;\r\n        while (this.matrixManager.isEmpty(i)) this.matrixManager.matrixData.shift();\r\n\r\n        if (this.matrixManager.isMinRow()) {\r\n            this.generateRowBlock();\r\n            this.generateRowBlock();\r\n        }\r\n\r\n        let listRowFull: Array<number> = this.matrixManager.getListRowFull();\r\n        if (this.clearFull(listRowFull)) {\r\n            // if (this.matrixManager.isMinRow()) this.generateRowBlock(); else this.getNextIndexRows();\r\n        }\r\n    }\r\n\r\n    private clearFull(listRowFull: Array<number>): boolean {\r\n        if (this.isGameOver) return;\r\n        if (listRowFull.length > 0) {\r\n            setTimeout(() => {\r\n                listRowFull.map((index) => {\r\n                    this.clearRow(index);\r\n                    this.gameView.showClearNode(new Vec3(150, index * 37, 0));\r\n\r\n                    // if (this.scoreManager.getScore() / 500 > this.countScore) {\r\n                    //     this.countScore++;\r\n\r\n                    //     let logGame = {\r\n                    //         seconds: this.time,\r\n                    //         score: this.scoreManager.getScore(),\r\n                    //         datetime: new Date().toLocaleString()\r\n                    //     }\r\n\r\n                    //     //this.gameCenter.setGameData(logGame)\r\n                    // }\r\n                });\r\n                this.audioController.playAudio(AudioType.Remove);\r\n            }, 500);\r\n            setTimeout(() => {\r\n                this.getNextIndexRows();\r\n                this.isPause = false;\r\n            }, 1000);\r\n\r\n            return true;\r\n        } else {\r\n            setTimeout(() => {\r\n                this.isPause = false;\r\n            }, 100);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private clearRow(indexRow: number): void {\r\n        if (this.combo === 1) {\r\n            this.gameView.playAnimationScore(`+80`);\r\n        } else {\r\n            setTimeout(() => {\r\n                this.gameView.playAnimationScore(`+80 x ${this.comboRatio[this.combo - 1]}`);\r\n            }, (this.combo - 1) * 200);\r\n        }\r\n\r\n        let listBlock = this.getBlockOfRow(indexRow);\r\n        this.scoreManager.addScore(80 * this.comboRatio[this.combo - 1]);\r\n        this.gameCenter.matchLog({ score: this.scoreManager.getScore() });\r\n        this.combo++;\r\n\r\n        listBlock.map((block) => {\r\n            this.gameView.removeBlock(block);\r\n        });\r\n    }\r\n\r\n    private getBlockOfRow(indexRow: number): Node[] {\r\n        let listBlockRow: Node[] = [];\r\n        let listBlock = this.getListBlock();\r\n        listBlock = listBlock.reverse();\r\n\r\n        listBlock.map((block) => {\r\n            block.getComponent(Block)?.getIndex().row === indexRow && listBlockRow.push(block);\r\n        })\r\n        return listBlockRow;\r\n    }\r\n\r\n    private getListBlock(): Node[] {\r\n        let listBlock = this.blockContainer.children;\r\n        listBlock = listBlock.filter((item) => item.getComponent(Block) !== null);\r\n        listBlock.sort((prev, next) => prev.getComponent(Block).getIndex().row - next.getComponent(Block).getIndex().row);\r\n        return listBlock;\r\n    }\r\n}\r\n\r\n"]}