{"version":3,"sources":["file:///Users/ADMIN/Desktop/drop-it/assets/Script/GameManager/MatrixManager.ts"],"names":["_decorator","Component","ccclass","property","MatrixManager","matrixData","Array","fillValue","index","value","start","end","indexRow","length","fill","pushArray","array","push","isEmptySlice","row","col","rowData","sliceRow","slice","i","getRow","isEmpty","getListRowFull","listRow","isFull","clearRow","getNextRow","indexCol","nextRow","isMaxRow","isMinRow"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MatrixManager')\r\nexport class MatrixManager extends Component {\r\n    public matrixData: Array<Array<number>> = new Array();\r\n\r\n    public fillValue(index: number, value: number, start: number, end: number) {\r\n        let indexRow = this.matrixData.length - index - 2;\r\n        this.matrixData[indexRow].fill(value, start, end);\r\n    }\r\n\r\n    public pushArray(array: Array<number>): void {\r\n        this.matrixData.push(array);\r\n    }\r\n\r\n    public isEmptySlice(start: number, end: number, row: number, col: number): boolean {\r\n        let indexRow = this.matrixData.length - row - 2;\r\n        let rowData = this.matrixData[indexRow];\r\n\r\n        let sliceRow = rowData.slice(start, end);\r\n        for (let i = 0; i < sliceRow.length; i++) {\r\n            if (sliceRow[i] !== 0) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public getRow(indexRow: number): Array<number> {\r\n        let index = this.matrixData.length - indexRow - 2;\r\n        return this.matrixData[index];\r\n    }\r\n\r\n    public isEmpty(indexRow: number): boolean {\r\n        for (let i = 0; i < this.matrixData[indexRow].length; i++)\r\n            if (this.matrixData[indexRow][i] === 1) return false;\r\n        return true;\r\n    }\r\n\r\n    public getListRowFull(): Array<number> {\r\n        let listRow: Array<number> = new Array();\r\n        for (let i = 0; i < this.matrixData.length; i++)\r\n            if (this.isFull(i)) {\r\n                this.clearRow(i, this.matrixData);\r\n                listRow.push(this.matrixData.length - i - 2);\r\n            }\r\n\r\n        return listRow;\r\n    }\r\n\r\n    private clearRow(indexRow: number, matrixData: Array<Array<number>>): void {\r\n        for (let i = 0; i < matrixData[indexRow].length; i++) matrixData[indexRow][i] = 0;\r\n    }\r\n\r\n    private isFull(indexRow: number): boolean {\r\n        let row = this.matrixData[indexRow];\r\n        for (let i = 0; i < this.matrixData[indexRow].length; i++)\r\n            if (row[i] !== 1) return false;\r\n        return true;\r\n    }\r\n\r\n    public getNextRow(indexRow: number, indexCol: number, length: number): number {\r\n        let nextRow = indexRow - 1;\r\n        while (nextRow >= 0) {\r\n            if (!this.isEmptySlice(indexCol, indexCol + length, nextRow, indexCol)) {\r\n                nextRow++;\r\n                break;\r\n            }\r\n            nextRow--;\r\n        }\r\n        if (nextRow < 0) nextRow = 0;\r\n        return nextRow;\r\n    }\r\n\r\n    public isMaxRow(): boolean {\r\n        return this.matrixData.length >= 12;\r\n    }\r\n\r\n    public isMinRow(): boolean {\r\n        return this.matrixData.length === 1;\r\n    }\r\n}\r\n\r\n"]}