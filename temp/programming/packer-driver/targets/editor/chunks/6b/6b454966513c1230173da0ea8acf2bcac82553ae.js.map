{"version":3,"sources":["file:///Users/ADMIN/Desktop/drop-it/assets/Script/GameManager/GameController.ts"],"names":["_decorator","Button","Component","director","Node","Vec3","GameView","Block","Constants","AudioType","MatrixManager","ScoreManager","AudioController","GameCenterController","LeaderboardHandle","ccclass","property","GameController","type","tooltip","listBlock","Array","startMouseLocation","isPause","currentBlock","currentPosition","currentLimitPosition","DEFAULT_LIMIT_POSITION","currentIndexCol","isGameOver","interval","time","countScore","combo","comboRatio","inteLog","start","gameView","showLoading","setValueLoading","setTimeout","hiddenLoading","initGame","generateRowBlock","blockContainer","on","EventType","TOUCH_MOVE","onTouchMove","getNextIndexRows","addEventButton","buttonPause","node","CLICK","switchPause","listButtonHome","map","button","loadScene","SCENE_NAME","BEGIN","listButtonRestart","GAME","buttonResume","getListBlock","audioController","playAudio","Push","block","compBlock","getComponent","index","getIndex","setIndex","row","col","rowBlock","fill","length","getLength","addEventBlock","matrixManager","pushArray","addRowBlock","isMaxRow","gameOver","GameOver","scoreManager","setLabelGameOver","showResult","TOUCH_START","onTouchStartBlock","TOUCH_END","onTouchEndBlock","TOUCH_CANCEL","event","Drag","target","showShadow","position","clone","y","getLocation","getRow","minIndex","maxIndex","Min","SQUARE_SIZE","WIDTH","Max","Dragend","hiddenShadow","indexRow","indexCol","fillValue","location","move","x","setPosition","Math","floor","HEIGHT","setPosShadow","checkFall","active","nextRow","getNextRow","playAnimation","Drop","i","isEmpty","matrixData","shift","isMinRow","listRowFull","getListRowFull","clearFull","clearRow","showClearNode","Remove","playAnimationScore","getBlockOfRow","addScore","removeBlock","listBlockRow","reverse","push","children","filter","item","sort","prev","next"],"mappings":"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","sourcesContent":["import { _decorator, Button, Camera, Component, director, EventTouch, Input, input, log, Node, Vec2, Vec3 } from 'cc';\r\nimport { GameView } from './GameView';\r\nimport { Block } from '../PrefabManager/Block';\r\nimport Constants from '../Utils/Constants';\r\nimport { AudioType, Limit } from '../Utils/DataTypes';\r\nimport { MatrixManager } from './MatrixManager';\r\nimport { ScoreManager } from './ScoreManager';\r\nimport { AudioController } from '../AudioController';\r\nimport { GameCenterController } from '../GameCenter/GameCenterController';\r\nimport { LeaderboardHandle } from '../../Leaderboard/Script/LeaderboardHandle';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n    @property({\r\n        type: GameView,\r\n        tooltip: 'Game view node'\r\n    })\r\n    private gameView: GameView;\r\n\r\n    @property({\r\n        type: Node,\r\n        tooltip: 'Block container'\r\n    })\r\n    private blockContainer: Node;\r\n\r\n    @property({\r\n        type: MatrixManager,\r\n        tooltip: 'Matrix manager node'\r\n    })\r\n    private matrixManager: MatrixManager;\r\n\r\n    @property({\r\n        type: ScoreManager,\r\n        tooltip: 'Score manager'\r\n    })\r\n    private scoreManager: ScoreManager;\r\n\r\n    @property({\r\n        type: AudioController,\r\n        tooltip: 'Audio controller'\r\n    })\r\n    private audioController: AudioController;\r\n    @property({\r\n        type: Button,\r\n        tooltip: 'Button pause'\r\n    })\r\n    private buttonPause: Button;\r\n\r\n    @property({\r\n        type: Button,\r\n        tooltip: 'List button home'\r\n    })\r\n    private listButtonHome: Button[] = [];\r\n\r\n    @property({\r\n        type: Button,\r\n        tooltip: 'List button restart'\r\n    })\r\n    private listButtonRestart: Button[] = [];\r\n\r\n    @property({\r\n        type: Button,\r\n        tooltip: 'Button resume'\r\n    })\r\n    private buttonResume: Button;\r\n\r\n    @property({\r\n        type: GameCenterController,\r\n        tooltip: 'Game center controller'\r\n    })\r\n    private gameCenter: GameCenterController;\r\n\r\n    @property({\r\n        type: LeaderboardHandle\r\n    })\r\n    private lbHandle: LeaderboardHandle;\r\n\r\n\r\n    private listBlock: Array<Node> = new Array();\r\n    private startMouseLocation: Vec3;\r\n    private isPause: boolean = false;\r\n\r\n    private currentBlock: Node;\r\n    private currentPosition: Vec3;\r\n    private currentLimitPosition: Limit = Constants.DEFAULT_LIMIT_POSITION;\r\n    private currentIndexCol: number = 0;\r\n    private isGameOver: boolean = false;\r\n    private interval: number;\r\n    private time: number = 0;\r\n    private countScore: number = 0;\r\n    private combo: number = 1;\r\n    private comboRatio = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5];\r\n\r\n    private inteLog: number = 0;\r\n\r\n    protected start(): void {\r\n        this.gameView.showLoading();\r\n        this.gameView.setValueLoading('Connecting to SA World...', 0.7);\r\n        // this.interval = setInterval(() => this.time++, 1000);\r\n        this.gameView.setValueLoading('Connected successfully!', 1);\r\n        setTimeout(() => {\r\n            this.gameView.hiddenLoading();\r\n            this.initGame();\r\n        }, 700);\r\n        // this.gameCenter.startMatch(() => {\r\n        // })\r\n\r\n        // this.gameView.hiddenLoading();\r\n        // this.initGame();\r\n    }\r\n\r\n    private initGame(): void {\r\n        this.generateRowBlock();\r\n        this.generateRowBlock();\r\n        this.generateRowBlock();\r\n\r\n        this.blockContainer.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n\r\n        this.getNextIndexRows();\r\n        this.addEventButton();\r\n    }\r\n\r\n    private addEventButton(): void {\r\n        this.buttonPause.node.on(Button.EventType.CLICK, () => {\r\n            if (this.isPause) return;\r\n            this.isPause = this.gameView.switchPause();\r\n        });\r\n\r\n        this.listButtonHome.map((button) => button.node.on(Button.EventType.CLICK, () => director.loadScene(Constants.SCENE_NAME.BEGIN)));\r\n        this.listButtonRestart.map((button) => button.node.on(Button.EventType.CLICK, () => director.loadScene(Constants.SCENE_NAME.GAME)));\r\n        this.buttonResume.node.on(Button.EventType.CLICK, () => {\r\n            this.isPause = false;\r\n            this.gameView.switchPause();\r\n        })\r\n    }\r\n\r\n    private generateRowBlock(): void {\r\n        this.isPause = true;\r\n        this.listBlock = this.getListBlock();\r\n        this.audioController.playAudio(AudioType.Push);\r\n\r\n        //Move blocks\r\n        this.listBlock.map((block) => {\r\n            let compBlock = block.getComponent(Block);\r\n            let index = compBlock?.getIndex();\r\n            compBlock?.setIndex(index.row + 1, index.col);\r\n        })\r\n\r\n        let row: Array<number> = new Array(8);\r\n        let rowBlock = this.gameView.generateRowBlock();\r\n        row.fill(0, 0, row.length);\r\n\r\n        //Set new blocks\r\n        rowBlock.map((block) => {\r\n            let compBlock = block.getComponent(Block);\r\n            let index = compBlock.getIndex();\r\n            let length = compBlock.getLength();\r\n            row.fill(1, index.col, index.col + length);\r\n            this.addEventBlock(block);\r\n        })\r\n\r\n        //Add blocks\r\n        this.matrixManager.pushArray(row);\r\n        this.gameView.addRowBlock(rowBlock);\r\n\r\n        if (this.matrixManager.isMaxRow()) this.gameOver();\r\n\r\n\r\n        setTimeout(() => {\r\n            this.getNextIndexRows();\r\n        }, 200);\r\n    }\r\n\r\n    private gameOver(): void {\r\n        //clearInterval(this.inteLog);\r\n        // this.gameCenter.matchLog({ score: this.scoreManager.getScore() });\r\n        // this.gameCenter.completeMatch(() => {\r\n        //     this.lbHandle.show();\r\n        // }, { score: this.scoreManager.getScore() });\r\n        this.isPause = true;\r\n        this.isGameOver = true;\r\n        this.audioController.playAudio(AudioType.GameOver);\r\n        this.scoreManager.setLabelGameOver();\r\n        this.gameView.showResult();\r\n    }\r\n\r\n    private addEventBlock(block: Node): void {\r\n        block.on(Node.EventType.TOUCH_START, this.onTouchStartBlock, this);\r\n        block.on(Node.EventType.TOUCH_END, this.onTouchEndBlock, this);\r\n        block.on(Node.EventType.TOUCH_CANCEL, this.onTouchEndBlock, this);\r\n    }\r\n\r\n    private onTouchStartBlock(event: EventTouch): void {\r\n        if (this.isPause || this.isGameOver) return;\r\n        this.audioController.playAudio(AudioType.Drag);\r\n\r\n        let block: Node = event.target;\r\n        let compBlock = block.getComponent(Block);\r\n        //Show select shadow\r\n        this.gameView.showShadow(compBlock.getIndex().col, compBlock.getLength());\r\n\r\n        //Get current values\r\n        this.currentBlock = block;\r\n        this.currentPosition = block.position.clone();\r\n        this.currentPosition.y = compBlock.getIndex().row * 37;\r\n        this.startMouseLocation = this.gameView.getLocation(event);\r\n        this.currentIndexCol = compBlock.getIndex().col;\r\n\r\n        //Get max index, min index\r\n        let row = this.matrixManager.getRow(compBlock.getIndex().row);\r\n        let minIndex = compBlock.getIndex().col - 1 <= 0 ? 0 : compBlock.getIndex().col - 1;\r\n        let maxIndex = compBlock.getIndex().col + compBlock.getLength();\r\n        maxIndex = maxIndex === row.length - 1 ? row.length - 1 : maxIndex;\r\n\r\n        while (minIndex > 0 && row[minIndex] === 0) minIndex--;\r\n        while (maxIndex < row.length && row[maxIndex] === 0) maxIndex++;\r\n\r\n        //Get max, min position\r\n        this.currentLimitPosition.Min = (minIndex === 0 && (row[minIndex] === 0 || minIndex === compBlock.getIndex().col)) ?\r\n            0 : (minIndex + 1) * Constants.SQUARE_SIZE.WIDTH;\r\n        this.currentLimitPosition.Max = (maxIndex - compBlock.getLength()) * Constants.SQUARE_SIZE.WIDTH;\r\n    }\r\n\r\n    private onTouchEndBlock(event: EventTouch): void {\r\n        if (this.isPause || this.isGameOver || !this.currentBlock) return;\r\n        this.isPause = true;\r\n        this.audioController.playAudio(AudioType.Dragend);\r\n        this.combo = 1;\r\n\r\n        this.gameView.hiddenShadow();\r\n        let indexRow = this.currentBlock.getComponent(Block).getIndex().row;\r\n        let indexCol = this.currentBlock.getComponent(Block).getIndex().col;\r\n        let length = this.currentBlock.getComponent(Block).getLength();\r\n\r\n        //If not change then back drop\r\n        if (indexCol === this.currentIndexCol) {\r\n            this.currentBlock.getComponent(Block).setIndex(indexRow, indexCol, 0.05);\r\n            this.isPause = false;\r\n            return;\r\n        }\r\n\r\n        this.matrixManager.fillValue(indexRow, 0, indexCol, indexCol + length);\r\n        this.currentBlock.getComponent(Block).setIndex(indexRow, this.currentIndexCol, 0.01);\r\n\r\n        indexRow = this.currentBlock.getComponent(Block).getIndex().row;\r\n        indexCol = this.currentBlock.getComponent(Block).getIndex().col;\r\n        this.matrixManager.fillValue(indexRow, 1, indexCol, indexCol + length);\r\n        this.currentBlock = null;\r\n\r\n        setTimeout(() => {\r\n            if (this.isPause === false) this.generateRowBlock();\r\n        }, 250);\r\n\r\n        setTimeout(() => {\r\n            this.getNextIndexRows();\r\n        }, 100);\r\n    }\r\n\r\n    /**\r\n     * Touch move on container node\r\n     */\r\n    private onTouchMove(event: EventTouch): void {\r\n        if (this.isPause || !this.currentBlock || this.isGameOver) return;\r\n\r\n        let location = this.gameView.getLocation(event);\r\n        let move = location.x - this.startMouseLocation.x;\r\n        let position = new Vec3(this.currentPosition.x + move, this.currentPosition.y);\r\n\r\n        if (position.x < this.currentLimitPosition.Min) position.x = this.currentLimitPosition.Min;\r\n        if (position.x > this.currentLimitPosition.Max) position.x = this.currentLimitPosition.Max;\r\n        this.currentBlock.setPosition(position);\r\n\r\n        this.currentIndexCol = Math.floor((position.x - 18) / Constants.SQUARE_SIZE.HEIGHT) + 1;\r\n        this.gameView.setPosShadow(this.currentIndexCol);\r\n    }\r\n\r\n    private getNextIndexRows(): void {\r\n        this.isPause = true;\r\n        let listBlock = this.getListBlock();\r\n        let checkFall: boolean = false;\r\n\r\n        for (let block of listBlock) {\r\n            let compBlock = block.getComponent(Block);\r\n            if (!compBlock) continue;\r\n            if (block.active === false) continue;\r\n\r\n            let indexRow = compBlock.getIndex().row;\r\n            let indexCol = compBlock.getIndex().col;\r\n            let length = compBlock.getLength();\r\n            if (indexRow < 0) continue;\r\n\r\n            //Fall block\r\n            let nextRow = this.matrixManager.getNextRow(indexRow, indexCol, length);\r\n            compBlock.setIndex(nextRow, indexCol);\r\n            if (nextRow !== indexRow) {\r\n                setTimeout(() => {\r\n                    compBlock.playAnimation();\r\n                }, 200);\r\n\r\n                checkFall = true;\r\n            }\r\n            if (checkFall) {\r\n                this.audioController.playAudio(AudioType.Drop);\r\n            }\r\n            this.matrixManager.fillValue(indexRow, 0, indexCol, indexCol + length);\r\n            this.matrixManager.fillValue(nextRow, 1, indexCol, indexCol + length);\r\n        }\r\n        let i = 0;\r\n        while (this.matrixManager.isEmpty(i)) this.matrixManager.matrixData.shift();\r\n\r\n        if (this.matrixManager.isMinRow()) {\r\n            this.generateRowBlock();\r\n            this.generateRowBlock();\r\n        }\r\n\r\n        let listRowFull: Array<number> = this.matrixManager.getListRowFull();\r\n        if (this.clearFull(listRowFull)) {\r\n            // if (this.matrixManager.isMinRow()) this.generateRowBlock(); else this.getNextIndexRows();\r\n        }\r\n    }\r\n\r\n    private clearFull(listRowFull: Array<number>): boolean {\r\n        if (this.isGameOver) return;\r\n        if (listRowFull.length > 0) {\r\n            setTimeout(() => {\r\n                listRowFull.map((index) => {\r\n                    this.clearRow(index);\r\n                    this.gameView.showClearNode(new Vec3(150, index * 37, 0));\r\n\r\n                    // if (this.scoreManager.getScore() / 500 > this.countScore) {\r\n                    //     this.countScore++;\r\n\r\n                    //     let logGame = {\r\n                    //         seconds: this.time,\r\n                    //         score: this.scoreManager.getScore(),\r\n                    //         datetime: new Date().toLocaleString()\r\n                    //     }\r\n\r\n                    //     //this.gameCenter.setGameData(logGame)\r\n                    // }\r\n                });\r\n                this.audioController.playAudio(AudioType.Remove);\r\n            }, 500);\r\n            setTimeout(() => {\r\n                this.getNextIndexRows();\r\n                this.isPause = false;\r\n            }, 1000);\r\n\r\n            return true;\r\n        } else {\r\n            setTimeout(() => {\r\n                this.isPause = false;\r\n            }, 100);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private clearRow(indexRow: number): void {\r\n        if (this.combo === 1) {\r\n            this.gameView.playAnimationScore(`+80`);\r\n        } else {\r\n            setTimeout(() => {\r\n                this.gameView.playAnimationScore(`+80 x ${this.comboRatio[this.combo - 1]}`);\r\n            }, (this.combo - 1) * 200);\r\n        }\r\n\r\n        let listBlock = this.getBlockOfRow(indexRow);\r\n        this.scoreManager.addScore(80 * this.comboRatio[this.combo - 1]);\r\n        // this.gameCenter.matchLog({ score: this.scoreManager.getScore() });\r\n        this.combo++;\r\n\r\n        listBlock.map((block) => {\r\n            this.gameView.removeBlock(block);\r\n        });\r\n    }\r\n\r\n    private getBlockOfRow(indexRow: number): Node[] {\r\n        let listBlockRow: Node[] = [];\r\n        let listBlock = this.getListBlock();\r\n        listBlock = listBlock.reverse();\r\n\r\n        listBlock.map((block) => {\r\n            block.getComponent(Block)?.getIndex().row === indexRow && listBlockRow.push(block);\r\n        })\r\n        return listBlockRow;\r\n    }\r\n\r\n    private getListBlock(): Node[] {\r\n        let listBlock = this.blockContainer.children;\r\n        listBlock = listBlock.filter((item) => item.getComponent(Block) !== null);\r\n        listBlock.sort((prev, next) => prev.getComponent(Block).getIndex().row - next.getComponent(Block).getIndex().row);\r\n        return listBlock;\r\n    }\r\n}\r\n\r\n"]}